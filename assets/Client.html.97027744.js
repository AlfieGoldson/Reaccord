import{_ as n,o as e,c as s,d as a}from"./app.6d17cc2d.js";const t={},o=a(`<h1 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> Client</h1><p>Reaccord&#39;s client is based on the DiscordJS Client with a few additional features.<br> You can use this client just like you&#39;d use DiscordJS&#39; client.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;reaccord&quot;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">createClientt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    token<span class="token operator">:</span> <span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p><strong>token</strong> <code>string</code> <em>required</em></p><blockquote><p>Required</p></blockquote><p>Discord bot token.</p><hr><p><strong>intents</strong> <code>Array&lt;Intent&gt;</code> <em>required</em></p><blockquote><p>Required</p></blockquote><p>Discord bot intents</p><hr><p><strong>devGuildId</strong> <code>string</code> <em>optional</em></p><blockquote><p>Required in dev mode</p></blockquote><p>Id of the discord server you&#39;ll test your bot in.</p><hr><p><strong>clientId</strong> <code>string</code> <em>optional</em></p><blockquote><p>Required if you use <strong>Slash commands</strong> or <strong>Message/User context menu commands</strong></p></blockquote><h3 id="other-options" tabindex="-1"><a class="header-anchor" href="#other-options" aria-hidden="true">#</a> Other options</h3><blockquote><p>See DiscordJS&#39;s Client options</p></blockquote><h1 id="client-object" tabindex="-1"><a class="header-anchor" href="#client-object" aria-hidden="true">#</a> Client Object</h1><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><p><strong>connect</strong> <code>(callback: (client: Client)) =&gt; Promise&lt;void&gt;</code><br> Connect the client using the token provided when instantiated</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code>client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><hr><p><strong>renderMessage</strong><br><code>(ref: Channel | Message | CommandInteraction, Code: () =&gt; JSX.Element)</code><br><code> =&gt; Promise&lt;Message&gt;</code><br> Sends a message rendered with react<br> if <code>ref</code> is a Channel, sends message to channel<br> if <code>ref</code> is a Message, responds to message<br> if <code>ref</code> is an Interaction, responds to interaction</p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code>client<span class="token punctuation">.</span><span class="token function">renderMessage</span><span class="token punctuation">(</span>channelObj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyCoolMessage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span>
</code></pre></div><hr><p><strong>createSlashCommand</strong></p><hr><p><strong>createUserCtxCommand</strong></p><hr><p><strong>createMessageCtxCommand</strong></p><hr><p><strong>refreshCommands</strong></p>`,36),c=[o];function p(r,i){return e(),s("div",null,c)}var d=n(t,[["render",p],["__file","Client.html.vue"]]);export{d as default};
